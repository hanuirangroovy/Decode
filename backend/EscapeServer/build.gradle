plugins {
	id 'org.springframework.boot' version '2.6.4'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
	id 'com.ewerk.gradle.plugins.querydsl' version '1.0.10'
}

group = 'com.ssafy'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

ext {
	set('springCloudVersion', "2021.0.1")
}

dependencies {

	//Database
	runtimeOnly 'mysql:mysql-connector-java'
	implementation 'com.querydsl:querydsl-jpa:5.0.0'
	implementation 'com.querydsl:querydsl-apt:5.0.0'
	implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
	implementation 'org.mongodb:mongodb-driver-sync'

	//Web
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation group: 'io.springfox', name: 'springfox-boot-starter', version: '3.0.0'
	implementation group: 'io.swagger', name: 'swagger-annotations', version: '1.6.5'

	// aws
	implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'

//	implementation group: 'io.springfox', name: 'springfox-swagger-ui', version: '2.9.2'
//	implementation group: 'io.springfox', name: 'springfox-swagger2', version: '2.9.2'
//	implementation 'org.springframework.cloud:spring-cloud-starter-config'
	implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-openfeign'

	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

tasks.named('test') {
	useJUnitPlatform()
}


/
*
* Querydsl 설정
* */

//def querydslSrcDir = "src/main/generated"
def querydslSrcDir = "$buildDir/generated/querydsl"

querydsl {
	jpa = true
	library = "com.querydsl:querydsl-apt"
	querydslSourcesDir = querydslSrcDir
}

compileQuerydsl {
	options.annotationProcessorPath = configurations.querydsl
}

configurations {
	querydsl.extendsFrom compileClasspath

//	all*.exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
//	all*.exclude group: 'org.springframework.boot', module: 'logback-classic'
}

sourceSets {
	main {
		java {
			srcDirs = ['src/main/java', querydslSrcDir]
		}
	}
}

task deleteGeneratedSources(type: Delete) {
	delete file(querydslSrcDir)
}

tasks.withType(JavaCompile) { it.dependsOn('deleteGeneratedSources') }

compileQuerydsl {
	if(file(querydslSrcDir).exists() )
		delete(file(querydslSrcDir))
}